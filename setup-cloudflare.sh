#!/bin/bash

# Setup script for Cloudflare Tunnel mode
# This creates a Cloudflare Tunnel and DNS record automatically via Cloudflare API

set -e

# Load environment variables from .env
if [ -f .env ]; then
    source .env
else
    echo "Error: .env file not found. Please create one from .env.example"
    exit 1
fi

# Check required variables
if [ -z "$CLOUDFLARE_API_TOKEN" ] || [ -z "$DOMAIN" ] || [ -z "$CLOUDFLARE_TUNNEL_NAME" ]; then
    echo "Error: Missing required Cloudflare configuration in .env"
    echo "Please set: CLOUDFLARE_API_TOKEN, DOMAIN, CLOUDFLARE_TUNNEL_NAME"
    exit 1
fi

echo "Setting up Cloudflare Tunnel for $DOMAIN..."

# Get Account ID from zone (since token has Zone permissions)
echo "Getting Cloudflare Account ID from zone..."

# Extract zone (root domain) from DOMAIN
# e.g., mad-proxy2.digitaino.com -> digitaino.com
ZONE=$(echo "$DOMAIN" | awk -F. '{print $(NF-1)"."$NF}')

# Get Zone info which includes account ID
ZONE_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=$ZONE" \
  -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
  -H "Content-Type: application/json")

ACCOUNT_ID=$(echo "$ZONE_RESPONSE" | grep -o '"account":\s*{\s*"id":\s*"[^"]*"' | grep -o '"id":\s*"[^"]*"' | cut -d'"' -f4)

if [ -z "$ACCOUNT_ID" ]; then
    echo "Error: Could not get account ID from zone $ZONE"
    echo "Make sure your domain uses Cloudflare DNS and your API token has Zone.Read permission"
    echo "Response: $ZONE_RESPONSE"
    exit 1
fi

echo "Account ID: $ACCOUNT_ID"

# Create tunnel via API
echo "Creating Cloudflare Tunnel: $CLOUDFLARE_TUNNEL_NAME..."

# Generate a random tunnel secret (base64 encoded 32 bytes)
TUNNEL_SECRET=$(openssl rand -base64 32)

# Create the tunnel
CREATE_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/cfd_tunnel" \
  -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
  -H "Content-Type: application/json" \
  --data "{\"name\":\"$CLOUDFLARE_TUNNEL_NAME\",\"tunnel_secret\":\"$TUNNEL_SECRET\"}")

# Check if tunnel creation was successful
if echo "$CREATE_RESPONSE" | grep -q '"success":true'; then
    # New tunnel created successfully
    TUNNEL_ID=$(echo "$CREATE_RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
else
    # Tunnel creation failed - might already exist or might be a real error
    echo "Note: Tunnel creation returned an error, checking for existing active tunnel..."

    # List only ACTIVE tunnels (exclude deleted ones)
    LIST_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/cfd_tunnel?is_deleted=false" \
      -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
      -H "Content-Type: application/json")

    # Find our tunnel by name in the results
    TUNNEL_ID=$(echo "$LIST_RESPONSE" | grep -o "\"name\":\"$CLOUDFLARE_TUNNEL_NAME\"" -B 10 | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)

    if [ -n "$TUNNEL_ID" ]; then
        echo "Found existing active tunnel: $TUNNEL_ID"
        # Check if we have existing credentials
        if [ -f "./cloudflared/$TUNNEL_ID.json" ]; then
            echo "Using existing credentials file"
            TUNNEL_SECRET=$(grep -o '"TunnelSecret":"[^"]*"' "./cloudflared/$TUNNEL_ID.json" | cut -d'"' -f4)
        else
            echo "Error: Tunnel exists but credentials file is missing"
            echo "Please delete the tunnel manually in Cloudflare dashboard and run this script again"
            exit 1
        fi
    else
        echo "Error: Could not create or find active tunnel"
        echo "Response: $CREATE_RESPONSE"
        exit 1
    fi
fi

if [ -z "$TUNNEL_ID" ]; then
    echo "Error: Could not create or find tunnel"
    echo "Response: $CREATE_RESPONSE"
    exit 1
fi

echo "Tunnel ID: $TUNNEL_ID"

# Create cloudflared directory and credentials file
mkdir -p ./cloudflared

cat > ./cloudflared/$TUNNEL_ID.json << EOF
{
  "AccountTag": "$ACCOUNT_ID",
  "TunnelSecret": "$TUNNEL_SECRET",
  "TunnelID": "$TUNNEL_ID"
}
EOF

echo "Created credentials file"

# Create tunnel configuration file
cat > ./cloudflared/config.yml << EOF
tunnel: $TUNNEL_ID
credentials-file: /etc/cloudflared/$TUNNEL_ID.json

ingress:
  - hostname: $DOMAIN
    service: http://localhost:80
  - service: http_status:404
EOF

echo "Created tunnel configuration file"

# Generate tunnel token (base64 encoded JSON)
TUNNEL_TOKEN=$(echo "{\"a\":\"$ACCOUNT_ID\",\"t\":\"$TUNNEL_ID\",\"s\":\"$TUNNEL_SECRET\"}" | base64)

# Update .env with tunnel token
if grep -q "CLOUDFLARE_TUNNEL_TOKEN=" .env; then
    # Update existing (macOS sed syntax)
    sed -i '' "s|CLOUDFLARE_TUNNEL_TOKEN=.*|CLOUDFLARE_TUNNEL_TOKEN=$TUNNEL_TOKEN|" .env
else
    # Add new
    echo "" >> .env
    echo "# Auto-generated by setup-cloudflare.sh" >> .env
    echo "CLOUDFLARE_TUNNEL_TOKEN=$TUNNEL_TOKEN" >> .env
fi

echo "Updated .env with tunnel token"

# Create DNS record via API
echo "Creating DNS record for $DOMAIN..."

# Get Zone ID from the response we already have
ZONE_ID=$(echo "$ZONE_RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)

if [ -z "$ZONE_ID" ]; then
    echo "Error: Could not find zone for $ZONE"
    echo "Make sure your domain uses Cloudflare DNS"
    exit 1
fi

# Create CNAME record pointing to tunnel
DNS_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
  -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
  -H "Content-Type: application/json" \
  --data "{\"type\":\"CNAME\",\"name\":\"$DOMAIN\",\"content\":\"$TUNNEL_ID.cfargotunnel.com\",\"ttl\":1,\"proxied\":true}")

if echo "$DNS_RESPONSE" | grep -q "success.*true"; then
    echo "DNS record created successfully"
elif echo "$DNS_RESPONSE" | grep -q "already exists"; then
    echo "DNS record already exists"
else
    echo "Warning: Could not create DNS record"
    echo "Response: $DNS_RESPONSE"
    echo "You may need to create it manually in Cloudflare dashboard"
fi

echo ""
echo "âœ… Cloudflare Tunnel setup complete!"
echo ""
echo "Starting services with health monitoring..."
docker-compose up -d

echo ""
echo "ðŸŽ‰ Done! Your proxy is now running at https://$DOMAIN"
echo ""
echo "Health checks run every 5 minutes and auto-restart containers if needed."
echo ""
echo "To view logs:"
echo "  docker-compose logs -f"
echo ""
echo "To check health status:"
echo "  docker logs rtve-healthcheck"
echo ""
echo "To stop:"
echo "  docker-compose down"
